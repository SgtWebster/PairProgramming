# Project Euler 12 - https://projecteuler.net/problem=12 - Lösung  76576500
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#  1 : 1
#  3 : 1,3
#  6 : 1,2,3,6
# 10 : 1,2,5,10
# 15 : 1,3,5,15
# 21 : 1,3,7,21
# 28 : 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def is_prime(x):   #von euler03 übernommen  #Überlegung: wenn x eien Primzahl ist, dann können wir diese getrost überspringen (Da maximal nur 2 Divisoren)
    if x < 2:
        return False

    for i in range(2, int(x ** 0.5) + 1):
        if x % i == 0:
            return False
    return True

def triaglenumbers(x): # Anzahl der gesuchten Divisoren - "mehr als" (Aufgabenstellung: "over five hundred")
    count = 0
    triangle = 0
   
    while True:
        count += 1
        triangle = int((count*(count+1))/2) 
        divisors = 0
        if not is_prime(triangle):
            for i in range(1,int((triangle+1)**0.5)):   #
                if triangle % i == 0:
                    divisors += 2 # Dadurch, dass wir nur bis zur Quadratwurzel prüfen, verdoppeln wir die Divisoren - da es immer einen "Gegendivisor" gibt.
                                    # Ich bin mir sicher, dass das später kein Mensch mehr von uns versteht, was wir hier aufgeführt haben
                                    # ich auch lol
        if divisors > x:
#            print("breakpoint: count", count, "triangle", triangle, "divisors", divisors) #debug
            break
#        print("count", count, "triangle", triangle, "divisors", divisors)  #debug
    return triangle


print(triaglenumbers(500))   #furchtbare Laufzeit - aber funktioniert #Breakpoint bei count 12375